buildscript {
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    // https://plugins.gradle.org/plugin/org.springframework.boot
    id 'org.springframework.boot' version "${SPRING_BOOT_VERSION}"
    // https://plugins.gradle.org/plugin/io.spring.dependency-management
    id 'io.spring.dependency-management' version '1.1.4'
    id "io.sentry.jvm.gradle" version "4.3.0"
    // Need to using a shaded jar (shadowJar) since a spring executable jar doesn't work
    // with AWS lambda:
    //
    // https://docs.spring.io/spring-cloud-function/docs/current/reference/html/aws-intro.html#_notes_on_jar_layout
    id 'com.github.johnrengelman.shadow' version '8.1.0'
    id 'maven-publish'
    id 'java'
}

group = 'uk.me.jeremygreen'
version = '1.0'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web:${SPRING_BOOT_VERSION}"
    implementation "com.amazonaws.serverless:aws-serverless-java-container-springboot3:2.0.0-M2"
    implementation("org.springframework.cloud:spring-cloud-function-adapter-aws:4.1.0")
    runtimeOnly "org.springframework.boot:spring-boot-devtools:${SPRING_BOOT_VERSION}"
    annotationProcessor "org.springframework:spring-context-indexer:6.1.1"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${SPRING_BOOT_VERSION}"
    testImplementation "junit:junit:4.13.1"
}

springBoot {
    mainClass = 'uk.me.jeremygreen.springexperiments.SpringExperimentsApplication'
}

sentry {
    includeSourceContext = true
}
assemble.dependsOn = [bootJar, shadowJar]
import com.github.jengelman.gradle.plugins.shadow.transformers.*
shadowJar {
    archiveClassifier = 'aws'
    from("${project('src:frontend').projectDir}/dist") {
        into("public")
    }
    // dependencies {
    // 	exclude(
    // 		dependency("org.springframework.cloud:spring-cloud-function-web:${springCloudFunctionVersion}"))
    // }
    // Required for Spring
    mergeServiceFiles()
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    append 'META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports'
    append 'META-INF/spring/org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration.imports'
    transform(PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories']
        mergeStrategy = "append"
    }
}

publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
        }
        // https://imperceptiblethoughts.com/shadow/publishing/#publishing-with-maven-publish-plugin
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
    repositories {
        maven {
            name 'aws-experiments'
            authentication {
                awsIm(AwsImAuthentication)
            }
            url "s3://aws-experiments.s3-eu-west-1.amazonaws.com/artifacts"
        }
    }
}

if (hasProperty('buildScan')) {
    gradleEnterprise {
        buildScan {
            termsOfServiceUrl = "https://gradle.com/terms-of-service"
            termsOfServiceAgree = "yes"
        }
    }
}

// Add React frontend artifacts to the jars.
[shadowJar, bootJar].each { jar ->
    jar.dependsOn('src:frontend:npm_run_build')
}
bootJar {
    from("${project('src:frontend').projectDir}/dist") {
        into("public")
    }
}

test.dependsOn('src:frontend:npm_run_ci')
